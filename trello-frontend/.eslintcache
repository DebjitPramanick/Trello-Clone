[{"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\index.js":"1","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\App.js":"2","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Home.js":"3","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Lists\\List.js":"4","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Lists\\Title.js":"5","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Card\\Card.js":"6","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Input\\InputConainer.js":"7","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Input\\InputCard.js":"8","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\Data.js":"9","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\StoredAPI.js":"10","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\NavBar\\Topbar.js":"11","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\NavBar\\Sidebar.js":"12","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\NavBar\\Navbars.js":"13","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\Colors.js":"14","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\ImageApi.js":"15","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\Config.js":"16"},{"size":422,"mtime":1612232433933,"results":"17","hashOfConfig":"18"},{"size":1050,"mtime":1612410692438,"results":"19","hashOfConfig":"18"},{"size":4682,"mtime":1612410715179,"results":"20","hashOfConfig":"18"},{"size":2157,"mtime":1612322587767,"results":"21","hashOfConfig":"18"},{"size":1864,"mtime":1612321543916,"results":"22","hashOfConfig":"18"},{"size":917,"mtime":1612321384379,"results":"23","hashOfConfig":"18"},{"size":1352,"mtime":1612321461128,"results":"24","hashOfConfig":"18"},{"size":2598,"mtime":1612321917350,"results":"25","hashOfConfig":"18"},{"size":462,"mtime":1612235482331,"results":"26","hashOfConfig":"18"},{"size":68,"mtime":1612233894292,"results":"27","hashOfConfig":"18"},{"size":961,"mtime":1612404984131,"results":"28","hashOfConfig":"18"},{"size":3149,"mtime":1612410302094,"results":"29","hashOfConfig":"18"},{"size":422,"mtime":1612410262028,"results":"30","hashOfConfig":"18"},{"size":158,"mtime":1612406565160,"results":"31","hashOfConfig":"18"},{"size":680,"mtime":1612409552087,"results":"32","hashOfConfig":"18"},{"size":148,"mtime":1612408980247,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"oormj3",{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\index.js",[],["72","73"],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\App.js",["74","75","76"],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Home.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Lists\\List.js",["77"],"import React from 'react'\r\n\r\nimport { Paper, CssBaseline } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Title from './Title';\r\nimport Card from '../Card/Card';\r\nimport InputConainer from '../Input/InputConainer';\r\n\r\n\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        minWidth: '300px',\r\n        backgroundColor: '#EBECF0',\r\n        marginLeft: theme.spacing(1),\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    cardContainer: {\r\n        marginTop: theme.spacing(4)\r\n    }\r\n}))\r\n\r\n\r\nconst List = ({ list, index }) => {\r\n    const classes = useStyles();\r\n    return (\r\n\r\n        <Draggable draggableId={list.id} index={index}>\r\n\r\n            {(provided) => (\r\n                <div\r\n                    ref={provided.innerRef} {...provided.dragHandleProps}\r\n                    {...provided.draggableProps}\r\n                >\r\n                    <Paper className={classes.root}>\r\n                        <CssBaseline />\r\n                        <Title title={list.title} listID={list.id} />\r\n\r\n\r\n                        <Droppable droppableId={list.id}>\r\n                            {(provided) => (\r\n                                <div\r\n                                    ref={provided.innerRef} {...provided.droppableProps}\r\n                                    className={classes.cardContainer}\r\n                                >\r\n                                    {\r\n                                        list.cards && list.cards.map((card, index) => (\r\n                                            <Card key={card.id} card={card} index={index} />\r\n                                        ))\r\n                                    }\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n\r\n                        </Droppable>\r\n\r\n\r\n                        <InputConainer listID={list.id} type={'card'} />\r\n                    </Paper>\r\n                </div>\r\n            )}\r\n\r\n\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default List\r\n","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Lists\\Title.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Card\\Card.js",["78","79"],"import React from 'react'\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: '300px',\r\n        padding: theme.spacing(1, 1, 1, 2),\r\n        margin: theme.spacing(1),\r\n        cursor: 'pointer'\r\n    }\r\n}))\r\n\r\nconst Card = ({ card, index }) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Draggable draggableId={card.id} index={index}>\r\n            {(provided) => (\r\n                <div\r\n                ref={provided.innerRef} {...provided.dragHandleProps}\r\n                {...provided.draggableProps}\r\n                >\r\n                    <Paper className={classes.card}>{card.title}</Paper>\r\n                </div>\r\n            )}\r\n\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Input\\InputConainer.js",["80"],"import React, {useState} from 'react'\r\nimport { Paper, Collapse, Typography } from \"@material-ui/core\";\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\";\r\nimport InputCard from './InputCard';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginTop: theme.spacing(1),\r\n        minWidth: '300px',\r\n        maxWidth: '300px',\r\n        cursor: 'pointer'\r\n    },\r\n    addCard: {\r\n        padding: theme.spacing(1, 1, 1, 2),\r\n        margin: theme.spacing(0, 1, 1, 1),\r\n        backgroundColor: '#EBECF0',\r\n        '&:hover': {\r\n            backgroundColor: \"grey\"\r\n        }\r\n    }\r\n}))\r\n\r\n\r\nconst InputConainer = ({listID, type}) => {\r\n\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Collapse in={open}>\r\n                <InputCard setOpen={setOpen} listID={listID} type={type}/>\r\n            </Collapse>\r\n\r\n            <Collapse in={!open}>\r\n                <Paper className={classes.addCard} elevation={0}\r\n                onClick={() => setOpen(!open)}>\r\n                    <Typography>\r\n                        {type==='card' ? '+ Add a card' : '+ Add another list'}\r\n                    </Typography>\r\n                </Paper>\r\n            </Collapse>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputConainer\r\n","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\Input\\InputCard.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\Data.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\StoredAPI.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\NavBar\\Topbar.js",["81"],"import React, {useState} from 'react'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar,Toolbar,Button } from '@material-ui/core'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    topbar: {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        color: 'white',\r\n        backgroundColor: 'grey'\r\n    }\r\n}))\r\n\r\n\r\n\r\nconst Topbar = ({ setOpenMenu }) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position='static' className={classes.topbar} elevation={0}>\r\n                <Toolbar>\r\n                    <h1 className={classes.title}>Your Tasks</h1>\r\n                    <Button className={classes.btn}\r\n                    onClick={() => setOpenMenu(true)}>\r\n                        Change Background\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Topbar\r\n","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\NavBar\\Sidebar.js",["82","83"],"import React, { useState, useEffect } from 'react'\r\nimport { Drawer, IconButton } from '@material-ui/core'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nimport colors from '../../utils/Colors';\r\nimport { getImages } from '../../utils/ImageApi';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        width: '400px',\r\n        padding: theme.spacing(2, 2, 2, 2)\r\n    },\r\n    menu: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        rowGap: '20px'\r\n    },\r\n    box: {\r\n        width: '48%',\r\n        height: '90px',\r\n        backgroundColor: 'blue',\r\n        borderRadius: '10px',\r\n        cursor: 'pointer',\r\n    },\r\n    colorsContainer: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        rowGap: '20px'\r\n    }\r\n}))\r\n\r\n\r\nconst Sidebar = ({ openMenu, setOpenMenu, setBgImage }) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [openColorOptions, setOpenColorOptions] = useState(false);\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    const getImageList = async () => {\r\n        const imageList = await getImages();\r\n        setImages(imageList);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getImageList();\r\n    }, [])\r\n\r\n\r\n    console.log(images)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Drawer open={openMenu} anchor='right'>\r\n                <div className={classes.drawer}>\r\n                    <IconButton onClick={() => setOpenMenu(false)}>\r\n                        <KeyboardArrowRightIcon />\r\n                    </IconButton>\r\n\r\n                    <h4 style={{ color: 'grey' }}>Choose Color Background</h4>\r\n\r\n\r\n                    <div className={classes.colorsContainer}>\r\n                        {colors.map((color, index) => (\r\n                            <div className={classes.box}\r\n                                key={index}\r\n                                style={{\r\n                                    backgroundColor: `${color}`\r\n                                }}\r\n                            ></div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <h4 style={{ color: 'grey' }}>Choose Image Background</h4>\r\n\r\n                    <div className={classes.menu}>\r\n\r\n                        {images.map(image => (\r\n                            <div className={classes.box}\r\n                                style={{\r\n                                    backgroundImage: `url(${image.thumb})`,\r\n                                    backgroundPosition: 'center',\r\n                                    backgroundRepeat: 'no-repeat',\r\n                                    backgroundSize: 'cover'\r\n                                }}\r\n                                onClick={() => setBgImage(image.url)}\r\n                            ></div>\r\n                        ))}\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\components\\NavBar\\Navbars.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\Colors.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\ImageApi.js",[],"D:\\React\\React Projects\\Real React Projects\\Trello Clone\\Trello Clone Files\\trello-frontend\\src\\utils\\Config.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":17},{"ruleId":"88","severity":1,"message":"92","line":21,"column":12,"nodeType":"90","messageId":"91","endLine":21,"endColumn":18},{"ruleId":"88","severity":1,"message":"93","line":24,"column":11,"nodeType":"90","messageId":"91","endLine":24,"endColumn":19},{"ruleId":"88","severity":1,"message":"94","line":10,"column":10,"nodeType":"90","messageId":"91","endLine":10,"endColumn":25},{"ruleId":"88","severity":1,"message":"94","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":25},{"ruleId":"88","severity":1,"message":"95","line":5,"column":27,"nodeType":"90","messageId":"91","endLine":5,"endColumn":36},{"ruleId":"88","severity":1,"message":"96","line":3,"column":22,"nodeType":"90","messageId":"91","endLine":3,"endColumn":26},{"ruleId":"88","severity":1,"message":"97","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":24},{"ruleId":"88","severity":1,"message":"98","line":42,"column":12,"nodeType":"90","messageId":"91","endLine":42,"endColumn":28},{"ruleId":"88","severity":1,"message":"99","line":42,"column":30,"nodeType":"90","messageId":"91","endLine":42,"endColumn":49},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'StoredAPI' is defined but never used.","Identifier","unusedVar","'loader' is assigned a value but never used.","'changeBG' is assigned a value but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'fade' is defined but never used.","'useState' is defined but never used.","'openColorOptions' is assigned a value but never used.","'setOpenColorOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]